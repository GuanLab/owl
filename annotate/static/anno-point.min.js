var point_radius = 5;
/**
 * Plugin wrapper.
 * @param {Object} config_opts configuration options
 * @constructor
 */
annotorious.plugin.PointSelector = function(config_opts) { 
  if (config_opts) {
    this._activate = config_opts.activate;
  }
}

/**
 * Attach a new selector onInitAnnotator.
 */
annotorious.plugin.PointSelector.prototype.onInitAnnotator = function(annotator) {
  annotator.addSelector(new annotorious.plugin.PointSelector.Selector());
  if (this._activate)
    annotator.setCurrentSelector('point');
}

/**
 * A point selector.
 * @constructor
 */
annotorious.plugin.PointSelector.Selector = function() { }

annotorious.plugin.PointSelector.Selector.prototype.init = function(annotator, canvas) {
  /** @private **/
  this._annotator = annotator;

  /** @private **/
  this._canvas = canvas;  

  /** @private **/
  this._g2d = canvas.getContext('2d');

  /** @private **/
  this._anchor;
  
  /** @private **/
  this._mouse;

  /** @private **/
  this._enabled = false;

  this._mouseUpListener;
}

/**
 * Attaches MOUSEUP and MOUSEMOVE listeners to the editing canvas.
 * @private
 */
annotorious.plugin.PointSelector.Selector.prototype._attachListeners = function() {
  var self = this;  

  this._mouseUpListener = function(event) {
      self._enabled = false;
      if (self._anchor) {
      self._annotator.fireEvent('onSelectionCompleted',
        { mouseEvent: event, shape: self.getShape(), viewportBounds: self.getViewportBounds() }); 
      }
  };

  this._canvas.addEventListener('mouseup', this._mouseUpListener);
}

/**
 * Detaches MOUSEUP and MOUSEMOVE listeners from the editing canvas.
 * @private
 */
annotorious.plugin.PointSelector.Selector.prototype._detachListeners = function() {
  var self = this;
  if (this._mouseUpListener) {
    this._canvas.removeEventListener("mouseup", self._mouseUpListener);
    this._mouseUpListener = null;
  }
}

/**
 * Selector API method: returns the selector name.
 * @returns the selector name
 */
annotorious.plugin.PointSelector.Selector.prototype.getName = function() {
  return 'point';
}

/**
 * Selector API method: returns the supported shape type.
 *
 * TODO support for multiple shape types?
 *
 * @return the supported shape type
 */
annotorious.plugin.PointSelector.Selector.prototype.getSupportedShapeType = function() {
  return 'rect';
}

/**
 * Selector API method: starts the selection at the specified coordinates.
 * @param {number} x the X coordinate
 * @param {number} y the Y coordinate
 */
annotorious.plugin.PointSelector.Selector.prototype.startSelection = function(x, y) {
  //this._attachListeners();
  this._anchor = { x: x, y: y };
  this._attachListeners();
  this._annotator.fireEvent('onSelectionStarted', { offsetX: x, offsetY: y });
  // goog.style.setStyle(document.body, '-webkit-user-select', 'none');
}

/**
 * Selector API method: stops the selection.
 */
annotorious.plugin.PointSelector.Selector.prototype.stopSelection = function() {
  this._anchor = null;
  this._detachListeners();
  this._g2d.clearRect(0, 0, this._canvas.width, this._canvas.height);
  // goog.style.setStyle(document.body, '-webkit-user-select', 'auto');
}

/**
 * Selector API method: returns the currently edited shape.
 * @returns {annotorious.shape.Shape} the shape
 */
annotorious.plugin.PointSelector.Selector.prototype.getShape = function() {
  var point = this._annotator.toItemCoordinates(this._anchor);
  return { type: 'rect', geometry: {x: point.x, y: point.y, width: 0.001, height: 0.001}}
}

/**
 * Selector API method: returns the bounds of the selected shape, in viewport (= pixel) coordinates.
 * @returns {object} the shape viewport bounds
 */
annotorious.plugin.PointSelector.Selector.prototype.getViewportBounds = function() {
  var right = this._anchor.x + point_radius;
  var left = this._anchor.x - point_radius;
  var top = this._anchor.y - point_radius;
  var bottom = this._anchor.y + point_radius;

  return { top: top, right: right, bottom: bottom, left: left };
}

/**
 * TODO not sure if this is really the best way/architecture to handle viewer shape drawing 
 */
annotorious.plugin.PointSelector.Selector.prototype.drawShape = function(g2d, shape, highlight) {
  var color;
  if (highlight) {
    color = '#fff000';
  } else {
    color = '#ffffff';
  }
  // TODO check if it's really a polyogn
  // Outer line
  g2d.lineWidth = 1.3;
  g2d.strokeStyle = '#000000';
  g2d.arc(shape.geometry.x, shape.geometry.y, point_radius, 0, 2*Math.PI);
  // Inner line
  g2d.lineWidth = 1.2;
  g2d.strokeStyle = color;
  g2d.arc(shape.geometry.x, shape.geometry.y, point_radius, 0, 2*Math.PI);
}
